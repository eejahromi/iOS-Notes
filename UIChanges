
-changing navigation bar color
UINavigationBar *navBarAppearance = [UINavigationBar appearance];
navBarAppearance.tintColor = [UIColor white];
navBarAppearance.barTintColor = [UIColor orangeColor];
navBarAppearance.titleTextAttributes = @{NSForgroundColorAttributeName:[UIColor whiteColor]}; // nav bar title color
[[UIApplication sharedApplication]setStatusBarStyle:UIStatusBarStyleLightContent]; // changing status bar color

// if a viewController is embedded inside a navigationController then status bar style light content should be changed this way:
self.navigationController.navigationBar.barStyle = UIStatusBarLightContent;

-Nav controller
Handy code for displaying nothing but the back arrow for navigation controller
self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@" " style:UIBarButtonItemStylePlain target:nil action:nil];

-back button modification
[[UINavigationBar appearance] setBackIndicatorImage:[UIImage imageNamed:@"back_btn.png"]];
[[UINavigationBar appearance] setBackIndicatorTransitionMaskImage:[UIImage imageNamed:@"back_btn.png"]];

-programmatically adding bar buttons
UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemCancel 
target:self action:@selector(cancelButtonPressed:)];

- (UIBarPosition)positionForBar:(id <UIBarPositioning>)bar
{ return UIBarPositionTopAttached; }

-setting the top edge in code
UIEdgeInsets contentInset = tableView.contentInset;
contentInset.top = 20; // 20 points from the top
[tableView setContentInset:contentInset];

-Applying blur to images using apples UIImageEffects files
// applying blur effect to an image
UIColor *tintColor = [UIColor colorWithWhite:0.11 alpha:0.36];
    UIImage *blurredBackground = [UIImageEffects imageByApplyingBlurToImage:[UIImage imageNamed:@"tree.jpg"] withRadius:12 tintColor:tintColor saturationDeltaFactor:1.2 maskImage:nil];
    self.backgroundImage.image = blurredBackground;
-The higher the radius, the more blury the image.
-The lower the saturation, the darker and more dull the image.

-tableview refreshControl
self.refreshControl = [[UIRefreshControl alloc]init];
[self.refreshControl addTarget:self action:@selector(someMethod) forControlEvents:UIControlEventValueChanged];

-tableview separator color
[self.tableView setSeparatorColor:[UIColor whiteColor]];

-bar positioning
- (UIBarPosition)positionForBar:(id <UIBarPositioning>)bar
{
    return UIBarPositionTopAttached;
}

-initializing nbis
UINib *cellNib = [UINib nibWithNibName:@"someCell" bundle:nil];
[self.tableView registerNib:cellNib forCellReuseIdentifier:@"SearchResultCell"];

In the nib, select the Table View. Go to the Attributes inspector and set Keyboard to Dismiss interactively.

-IBDesignable
-IBInspectible
Allow you to have attributes for your custom controls inside interface builder when you write the code inside the custom class.

-storyboard textField
did End on Exit drag to a dismiss function
auto-enable return key box check for no text key disabling

-iPad popover for UIAlertController (Actionsheet or defaultAlert)
//checking for iPad UI
if(UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
    // In this case the device is an iPad.
    controller.popoverPresentationController.barButtonItem = self.mapTypeButton; // for the button (i.e barButton reference)
    controller.popoverPresentationController.sourceView = self.view; 
 }


-Attributed Strings
UIFont *font = [UIFont fontWithName:@"Helvetica-Bold" size:30.0f];

    NSMutableAttributedString * attrNameString = [[NSMutableAttributedString alloc] initWithString:self.name];

    NSMutableAttributedString * attrAdjectiveString = [[NSMutableAttributedString alloc] initWithString:self.adjective];

    NSMutableAttributedString * attrAdverbString = [[NSMutableAttributedString alloc] initWithString:self.adverb];

    NSMutableAttributedString * attrNounString = [[NSMutableAttributedString alloc] initWithString:self.noun];

    [attrNameString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.name.length)];

    [attrAdjectiveString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.adjective.length)];

    [attrNounString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.noun.length)];

    [attrAdverbString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.adverb.length)];

    NSMutableAttributedString * firstString = [[NSMutableAttributedString alloc] initWithString:@" is happy the "];

    NSMutableAttributedString * secondString = [[NSMutableAttributedString alloc] initWithString:@"homework is done because the"];

    NSMutableAttributedString * thirdString = [[NSMutableAttributedString alloc] initWithString:@"almost stopped him from "];

    NSMutableAttributedString * fourthString = [[NSMutableAttributedString alloc] initWithString:@"watching the game!"];



    [attrNameString appendAttributedString:firstString];

    [attrNameString appendAttributedString:attrAdjectiveString];

    [attrNameString appendAttributedString:secondString];


    [attrNameString appendAttributedString:attrNounString];

    [attrNameString appendAttributedString:thirdString];

    [attrNameString appendAttributedString:attrAdverbString];

    [attrNameString appendAttributedString:fourthString];


    self.resultsTextView.attributedText = attrNameString;

