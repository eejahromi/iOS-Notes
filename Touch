->UITouch represents the movement or the presence of a finger on the screen for an event.

-properties
timestamp
tapCount
phase

-Phases
UITouchPhaseBegan
UITouchPhaseMoved
UITouchPhaseStationary
UITouchPhaseEnded
UITouchPhaseCancelled


->UIEvent
EventType
EventSubTypes

-three main types
UIEventTypeTouches
UIEventTypeMotion
UIEventTypeRemoteControl

-methods
allTouches
touchesForView
touchesForWindow

->Hit Test
when the user touches the screen, iOS looks for the view that was touched and that becomes the hit test view

methods
UIWindow sendEvent
(UIView *)hitTest:withEvent:
(BOOL) pointInside:withEvent:

UIWindow sendEvent fires first thing after touch
then point inside will fire for a view to see if the touch occured inside that view
if NO, hit test skips that view
if YES, then hitTest will fire
this repeats until hitTest is detected


->UIResponder cycle for touches
touchesBegan:withEvent:
touchesMoved:withEvent:
touchesEnded:withEvent:
touchesCancelled:wihEvent:

Detecting which uiview was touched by the user sample code
-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
    UITouch *touch = [touches anyObject];
    CGPoint touchPoint = [touch locationInView:self.view];
    if( CGRectContainsPoint( self.mainPanel.frame, touchPoint ) && touch.tapCount == 2){
      // self.mainPanel - do something
      }
}

-disabling touch events using UIView
remove from superview
set user interaction to NO
hidden to YES or alpha/opaque to zero 

some UIKit views/UIConrols have user interaction set to NO by default i.e UIImageView

->GestureRecognizers
pan
pinch
rotate
tap
longPress
custom

simple gestureRecognizer in code
UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(viewTapped:)];
[self.myView addGestureRecognizer:tapGesture];

-(void)viewTapped:(UITapGestureRecognizer *)tap{
  NSLog("You tapped the view!");
}

-sample code for dragging an image with an already defined panGestureRecognizer

-(void)moveView:(UIPanGestureRecognizer *)pan{
    switch (pan.state) {
        case UIGestureRecognizerStateChanged:{
            CGPoint offset = [pan translationInView:pan.view]; // how far the view moves
            CGPoint center = pan.view.center;
            
            center.x += offset.x;
            center.y += offset.y;
            
            pan.view.center = center;
            
            [pan setTranslation:CGPointZero inView:pan.view]; // from zero to the actual view (difference)
        
        }
            break;
            
        default:
            break;
    }
}



**GestureRecognizers do not use UIResponderChain
