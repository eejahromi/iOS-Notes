Rules of AutoLayout
size and position
-height
-width
-horizontal constraint
-vertical constraint
-relationship constraint

Layout Guides
-top layout guide sits 20 points away from the top of the view
  if there is a navigation controller then it sits right below the navigation bar.
-bottom layout guide changes depending on if there is a tab bar or not.

Design by intent
Meaning that you don't necessarily have to describe the position but you can describe the relationship with respect to the other views and corners of the screen and let autolayout figure out the rest.

-we can always modify existing constraints in the attribute inspector or use Resolve Auto Layout Issues
-XCode adds auto layout when you don't add it during compile time. But that only happens if you don't set a single constraints on your object. 

-Intrinsic Content Size
objects like UIButton and UILabel can calculate their own size i.e text or image plus some padding.
with these UI elements you don't have to set a specific width or height constraint when you want to use their default size.

Constraints are real objects (of class NSLayoutConstraint) and they also have attributes.

-Too many constraints
when you get the "Unable to simultaneously satisfy constraints." error then that means we have too many constraints.
Usually the problem is that either the width or height has to be flexible OR fixed.
or 
the relationship constraint has to be flexible OR fixed but width/height and relationship constraints cannot both be the same.

-when two views have the same priority for compressing or growing then auto layout can get confused so in that case we have to change the priorities "Content Compression Resistance Priority" and "Content Hugging Priority".

// Auto Layout in code
-This pins view1 20 points above view2
NSLayoutConstraint *myConstraint =[NSLayoutConstraint    
     constraintWithItem:view1                                                                 
     attribute:NSLayoutAttributeBottom                                                                     
     relatedBy:NSLayoutRelationEqual                                                                        
     toItem:view2                                                            
     attribute:NSLayoutAttributeBottom                                                                    
     multiplier:1.0                                                                      
     constant:-20];
     
-This makes button's width 5 times the width of the label
NSLayoutConstraint *myConstraint =[NSLayoutConstraint 
     constraintWithItem:mybutton
     attribute:NSLayoutAttributeWidth
     relatedBy:NSLayoutRelationEqual
     toItem:mylabel
     attribute:NSLayoutAttributeWidth
     multiplier:5
     constant:0];
     

Stackviews
container for a few subviews that makes it easier to lay them out in a nice pattern vertically or horizontally.

// Monospacing fonts to prevent labels bouncing as a result intrinsic size
NSArray *monospacedSetting = @[@{UIFontFeatureTypeIdentifierKey: @(kNumberSpacingType),
                                     UIFontFeatureSelectorIdentifierKey: @(kMonospacedNumbersSelector)}];
    
    UIFontDescriptor *newDescriptor = [[self.durationLabel.font fontDescriptor] fontDescriptorByAddingAttributes:@{UIFontDescriptorFeatureSettingsAttribute: monospacedSetting}];
    self.countLabel.font = [UIFont fontWithDescriptor:newDescriptor size:0];
