A collection of useful tips, tricks and shortcut in XCode

-Open quickly: good for jumping in between files or even searching for method names
command + shift + o

-Jump to definition: right click on a method name in a .h file to jump to the implementation

-Related items menu
subclasses and superclasses: useful for file hierarchy and understanding the project
caller and callee for methods

-debugging
summary format edit: changing summary format of the variables in debugging area
right click on variable > edit summary format > type in a valid message
i.e {$VAR.textLabel.text};s

options for what to show:
n - variable name
s - summary
t - type
v - value

-watch
setting up watch for a certain variables to see when it changes


-code commenting keywords
#pragma mark - 
//FIXME:
//TODO:
//MARK:

-version control in command line (can't do in XCode)
git reset --hard HEAD // revert
git pull --rebase // pulling while having local commits that haven't been pushed yet
git rebase master // updating a feature branch to the master branch or any other branch

--NOTE: (ideally this shouldn't happen because local changes should happen in a separete branch)
git tag v1.0 // tagging
git stash // put all the changes since last commit in a stack
git stash drop // forget the last stash (if you stash twice, you have to drop twice)
git mergetool -t opendiff // for merge conflicts
git commit --amend // edit the most recent commit message
git diff --stat `git hash-object -t tree /dev/null` | tail -1 // for counting lines of code for project
git log --oneline // short version of log with only hash and commit message
git log --since="2016-07-01" // show only commits after july 1st, 2016

-Instruments
different templates for different purposes
option-click on timeline when recording, we can put little markers (bookmark time)

-Swift
XCode can generate header files in swift so we can have a quick look at our method signatures to understand it better
Navigate -> Jump to Generate Interface


-Build Process
The process that code goes through in order to run the app is separeted into a few parts which can be seen in the XCode
project file in different tabs: Build phases, Build Rules and Build Settings

Build Phases
A high level plan of how code is going to turn into executables
Target Dependencies: Adding dependencies in the project like CocoaPods
Compile Sources: Compiling .m source code files
Link Binary with Libraries: Linking the compiled source code with static and dynamic libraries
Copy Bundle Resources: Copy items like PNGs and other resource files

there are more phases that a user can add such as run scripts to run before the link process

Build Rules
Build Rules specify how different file types should be compiled. Normally there is no need to add new rules but under certain 
situations we may want to have files other than .m files to be compiled with certain inputs and outputs

Build Settings
Lots of details and configurations for how each task in the build process is perform like compiler warnings and code signing 
details etc.
All these settings can be seen in a text format by opening the XCode project file in a text editor.
Build settings environment variables can be looked up at https://pewpewthespells.com/blog/buildsettings.html

Environment variables
// Runtime environment variable for launch time statistics
Target -> Edit Scheme -> Run -> Arguments
DYLD_PRINT_STATISTICS 1

-Older iOS simulator versions
// download specific versions of the simulator
Xcode/Preferences/Components 

