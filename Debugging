-Useful debugging techniques and strategies

Signals

SIGABRT
abnormal termination
syntax is correct, but logically incorrect.
usually means XCode terminated because the app tried to do something it shouldn't.

SIGSEGV (BAD_ACCESS)
Invalid memory access. Address exists but we don't have access to it.
SIGBUS (BAD_ACCESS)
Invalid memory access. Adress doesn't exist or accessor is invalid.

-enabling zombies
for BAD_ACCESS errors it is useful to enable zombies in the project target to get more info on where the error is happening.
Project target > Edit scheme > Diagnostics > check enable zombie objects

- “unrecognized selector” error, usually means we forgot to implement a method somewhere

-enabling thread sanitizer
Project target > Edit scheme > Run > Options > Enable thread sanitizer

Example for debugging
-check the signal if there is one given
-check the exception if there is one (i.e NSInvalidArgException)
-check the call stack for the methods that were called. (gray ones are system calls, black ones are our calls)
-check call stack registers if given. using lldb: di -s <register address> to get more info about the call.
(look for the ones that involve our code)


-breakpoints tips
General breakpoints
-use the navigator
CMD + backslash for adding/deleting breakpoints
-can group or share breakpoints
log statements: %B will print the method we're in at breakpoint, %H hit count of the method

Logging breakpoints
Edit breakpoint > conditions/actions/commands
Executing scripts

-Exception breakpoint 
(when we end up in main.m without useful info)
exception navigator > add exception point > add action
actions: 
po $eax (32 bit simulator) $rax (64 bit) $r0 (device)
bt (backtrace)

-Symbolic breakpoint
for ignoring cases like skipping iterations of loops and adding more action
also for stopping in a specific place in multiple files.
Example,

-registers
$rdi
$rsi
$rdx
$rcx

(we want to print the name of the class associated with a viewController as we navigate through app)
Symbol: -[UIViewController viewDidAppear:]
Condition: sizeof(void *) == 8 // only print for 64 bit
action: po [$rdi class] // print class name in register 1
* check automatically continue after

(say we want to break when a tableViewCell has the text "new Content" in it)
Symbol: -[UILabel setText:]
Condition: (BOOL)[$rdx containsString:@"new Content"]

Sound on breakpoint
setup to make a sound when a line of code is executed
Edit Breakpoint > addAction > pick sound /check Automatically continue after evaluating


