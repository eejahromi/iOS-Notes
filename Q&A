
-Basics and memory management

retain/strong
takes ownership of the object and increments retain count by 1

the object will not be destroyed as long as you or any other object points to it with a strong reference.

weak
takes non-ownership relationship between property and the assigned value. used to prevent retain cycle.

weak signifies that we don't want to have control over object's lifetime. the object only lives because at least one other object holds a strong reference to it. once that is no longer the case, object gets destroyed and the weak property will get set to nil.

copy
alternative to strong but it creates a copy of the object and takes ownership of that
it also freezes the object. Good for things like strings
can only be used by objects that conform to NSCopying protocol

assign
for scalars, specifies that setter uses simple assignment.
doesn't perform any memory management call when assigning a new value to property.
doesn't increment retain count

atomicity
when we have more than one thread, it's possible for the setter and getter to be called 
at the same time so that means getter/setter can be interrupted by another operation.

atomic
atomic properties lock the underlying object to prevent setter/getter to be called at the same time. but using atomic doesn't necessarily mean that code is thread safe.
atomic has a little overhead

nonatomic
little more efficient. but doesn't guaranty the integrity of accessors in a multi-threaded environment.

synthesize
@synthesize running = _running;

- Application level and little details

protocol
declaring methods that can be used by other classes. providing a way for classes to share methods without inheriting from other classes. usually used for custom delegation.

UIApplication
facilitates the interaction between the system and other objects in app
controller object UIApplication manages the application event loop

UIApplication: UIResponder

dynamic
@dynamic tells the compiler not to generate a warning if it can't find implementations of accessor methods associated with the property.
tells the compiler that you will fulfill the API contract implied by a property either by providing method implementations directly or at runtime using other mechanisms such as dynamic loading of code or dynamic method resolution.

delegate
an object that will respond to pre-chosen selectors at some point in the future

category
allows you to add methods to existing classes without subclassing them. even when you don't have the implementations.

-Distribute the implementation of your own classes into separate source filesâ€”for example, you could group the methods of a large class into several categories and put each category in a different file.
-Declare private methods.

blocks
language feature, pieces of code you can pass around to methods as if they are values. blocks are objc objects. they can capture values from enclosing scope.

NSOperation/NSOperationqueue
an operation object is a single-shot object. you execute operations by adding them to an operation queue.

Layer objects
layer objects are used by views to render their contents. can use them for complex animations. they don't respond to touch. 

UIWindow
coordinates presentation of one or more views

startup
UIApplicationMain calls appDelegate which handles the state transitions
app delegate is declared as a subclass of UIResponder

UIApplicationMan creates a main thread and calls the main function and hands it over to UIKit framework

app states
before running: not running
after lunch: briefly in inactive on its way to active or background

suspended:
app is in memory but not executing code

background:
app not in foreground but is still executing code.

app on it's way to being suspended:
briefly in background

active state:
in foreground and receiving events

inactive state:
when user locks screen or incoming message,phone call
in foreground but not receiving events
or briefly inactive as it transitions into different state

- Abstract concepts and higher level Qs

App bundle:
xcode packages the project as a bundle, a directory in the filesystem that groups related resources together in one place. bundle contains app executable file and supporting resource file such as app icon, image files and localized content.

code sign:
signing an application allows the system to identify the app and verify that the app hasn't been modified since the last time it was signed.

NSCoder:
abstract class, which represents a stream of data. used in archiving and unarchiving objects. 

sandbox:
for security reasons each app is installed in a sandbox. it limits app access to files, preferences, network resources, hardware... 
sandbox contains
bundle container
data container
iCloud container

NSOperationQueue concurrent vs non-concurrent
In the context of an NSOperation object, which runs in an NSOperationQueue, the terms concurrent and non-concurrent do not necessarily refer to the side-by-side execution of threads. Instead, a non-concurrent operation is one that executes using the environment that is provided for it while a concurrent operation is responsible for setting up its own execution environment.

controller object
A controller object acts as a coordinator or as an intermediary between one or more view objects and one or more model objects.

singleton
The Singleton design pattern ensures a class only has one instance, and provides a global point of access to it. The class keeps track of its sole instance and ensures that no other instance can be created. Singleton classes are appropriate for situations where it makes sense for a single object to provide access to a global resource.
NSFileManager, NSWorkspace, NSApplication, and, in UIKit, UIApplication. A process is limited to one instance of these classes. When a client asks the class for an instance, it gets a shared instance, which is lazily created upon the first request.

// singleton example
+ (instanceType)sharedInstance {
	static MyManager *sharedManager = nil;
	dispatch_once_t onceToken;
	
	dispatch_once(&onceToken,^{
		sharedManager = [[self alloc]init];
	});
	return sharedManager;
}

category vs subclass
you can't add instance variables to the class
if you override methods of the class, application may behave unpredictably

notification
one-to-many broadcast of message based on the observer pattern
different from delegation which is one to one and observing objects cannot directly affect an impending operation

posing
allows a class to entirely replace another class within an application. the replacing class "poses as" te target class.
a class may only pose as one of its direct or indirect subclasses
kind of similar to categories but posing also can:
posing class can call overriden methods through super, thus incorporating the implementation of the target class
posing class can override methods defined in categories

run loop in iOS
event processing loop that you use to schedule work and coordinate the receipt of incoming events. the purpose of a run loop is to keep your thread busy when there is work to do and put your thread to sleep when there is none.
each thread including app's main thread has an associated run loop object. only secondary threads need to run their run loop explicitly.

dynamic typing
when type is not checked at compile time. objc uses id data type.

Method swizzling
Method swizzling is the act of swapping the implementations of two selectors as a program runs.

NSOperation (cont.)
Quality of Service is a new concept in iOS 8 & OS X Yosemite that creates consistent, high-level semantics for scheduling system resources.

UITouch
object that represents location, force , movement and size of a finger on the screen for an event.
hit test 
when a view is touched ios will go down the view hierarchy to find a view that was touched using hit test
responder chain
after a touch is recognized ios goes up the responder chain all the way til window and UIApplication to find who's responsible for responding to the touch

find location of touch
touchesBegan
UITouch *touch = [touches anyObject];
CGPoint touchPoint = [touch locationInView:self.view];
if(CGRectContainsPoint(self.mainPanel.frame,touchPoint) && touch.tapCount == 2)
	self.mainPanel do something
 

instruments
performance, analysis and testing tool suite for profiling OSX and iOS apps.
collects info about your app over a designated period of time
info collected is based on predetermined templates
Examples of instruments: Allocation, Core Data, Zombies, UI test, performance

Core Data 
CD has been optimized to use as little memory as possible. 
if we ask CD for a 100 customers, CD allocates 100 spaces in an array but won't actually fetch until user asks for it.

zombie object
when the retain count hits 0 but object remains in memory you have a zombie.

OS/Threads
Race Condition: the fact that every thread can access the same memory may cause what is known as a race condition.
lock for instance variable
@synchronized (self) {
    myClass.object = value;
}

Apple Developer Account/iTunes Connect
-Code signning certificates
consists of developer identity and his/her private key

