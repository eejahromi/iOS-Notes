
-Basics and memory management

retain/strong
takes ownership of the object and increments retain count by 1

the object will not be destroyed as long as you or any other object points to it with a strong reference.

weak
takes non-ownership relationship between property and the assigned value. used to prevent retain cycle.

weak signifies that we don't want to have control over object's lifetime. the object only lives because at least one other object holds a strong reference to it. once that is no longer the case, object gets destroyed and the weak property will get set to nil.

copy
alternative to strong but it creates a copy of the object and takes ownership of that
it also freezes the object. Good for things like strings
can only be used by objects that conform to NSCopying protocol

assign
for scalars, specifies that setter uses simple assignment.
doesn't perform any memory management call when assigning a new value to property.
doesn't increment retain count

atomicity
when we have more than one thread, it's possible for the setter and getter to be called 
at the same time so that means getter/setter can be interrupted by another operation.

atomic
atomic properties lock the underlying object to prevent setter/getter to be called at the same time. but using atomic doesn't necessarily mean that code is thread safe.
atomic has a little overhead

nonatomic
little more efficient. but doesn't guaranty the integrity of accessors in a multi-threaded environment.

synthesize
@synthesize running = _running;

- Application level and little details

protocol
declaring methods that can be used by other classes. providing a way for classes to share methods without inheriting from other classes. usually used for custom delegation.

UIApplication
facilitates the interaction between the system and other objects in app
controller object UIApplication manages the application event loop

UIApplication: UIResponder

dynamic
@dynamic tells the compiler not to generate a warning if it can't find implementations of accessor methods associated with the property.
tells the compiler that you will fulfill the API contract implied by a property either by providing method implementations directly or at runtime using other mechanisms such as dynamic loading of code or dynamic method resolution.

delegate
an object that will respond to pre-chosen selectors at some point in the future

category
allows you to add methods to existing classes without subclassing them. even when you don't have the implementations.

-Distribute the implementation of your own classes into separate source filesâ€”for example, you could group the methods of a large class into several categories and put each category in a different file.
-Declare private methods.

blocks
language feature, pieces of code you can pass around to methods as if they are values. blocks are objc objects. they can capture values from enclosing scope.

NSOperation/NSOperationqueue
an operation object is a single-shot object. you execute operations by adding them to an operation queue.

Layer objects
layer objects are used by views to render their contents. can use them for complex animations. they don't respond to touch. 

UIWindow
coordinates presentation of one or more views

startup
UIApplicationMain calls appDelegate which handles the state transitions
app delegate is declared as a subclass of UIResponder

UIApplicationMan creates a main thread and calls the main function and hands it over to UIKit framework

app states
before running: not running
after lunch: briefly in inactive on its way to active or background

suspended:
app is in memory but not executing code

background:
app not in foreground but is still executing code.

app on it's way to being suspended:
briefly in background

active state:
in foreground and receiving events

inactive state:
when user locks screen or incoming message,phone call
in foreground but not receiving events
or briefly inactive as it transitions into different state
