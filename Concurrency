C-Library for managing different threads using queues and blocks

->declaring a new queue
dispatch_queue_t queue;

//three main popular types of queues
1.serial: makes sure that the tasks are happening in order and coming back in order
dispatch_queue_create("reverseDNSstringByConvention",DISPATCH_QUEUE_SERIAL); // or NULL instead of second parameter

2.concurrent: tasks are happening simultaneously and coming back as soon as finishing
dispatch_get_global_queue(GLOBAL_QUEUE_PRIORITY,0);

-four types of queues
GLOBAL_QUEUE_PRIORITY_HIGH
GLOBAL_QUEUE_PRIORITY_DEFAULT
GLOBAL_QUEUE_PRIORITY_LOW
GLOBAL_QUEUE_PRIORITY_BACKGROUND // lowest priority

adding tasks to a background queue
dispatch_async(queueName,^{ codeBlock });

3. Main Queue
**All UI related stuff should be run on the main queue
dispatch_async(dispatch_get_main_queue(),^{ codeBlock });

Other useful queues:
dispatch groups: useful for aggregate synchronization. We can add multiple blocks and track for their completion.

-dispatch_after
double delayInSeconds = 1.0;
dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW,(int64_t)(delayInSeconds * NSEC_PER_SEC));
dispatch_after(popTime,dispatch_get_main_queue(),^(void){
	// run this code on main queue after delay 
});

dispatch_group_t group = dispatch_group_create();
dispatch_group_async(group,queue,^{ blockOfCode });
dispatch_group_notify(group,queue,^{ blockOfCode }); // notify when group tasks are completed

-->Dispatch queues vs Opreration queues
dispatch queues execute tasks in a FIFO order but operations queues don't
dispatch queues can have serial execution but operations don't although it is possible to achieve via dependencies

-Operation queues
each queue is an instance of NSOperationQueue class
provides an object oriented approach instead of a c-based api
they store NSOperation objects
tasks always execute concurrently and never serially

NSOperation is an abstract class
two concrete subclasses:
-NSInvocationOperation
-NSBlockOperation

*Refering to self in blocks
when using self in a block we have to be careful of a memory cycle
local variables are always strong, and self.something means we have a strong pointer and so if these two are pointing to each other then neither one of them can leave the heap so then we have a memory cycle.
The solution is to declare a weak variable using the keyword __weak
** weak means if no object is pointing to it then we don't keep it in the heap.
__weak SomeClass *weakSelf = self;


