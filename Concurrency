Concurrent programming

going from bottom to top
-pthreads
-NSThreads
-GCD
-Operation Queues
-RunLoops

-pthreads
-NSThreads
problem: clunky code, creating your own threads and using higher level apis can result in dozens or hundreds of threads which will take memory and kernel resources.

->Queue based concurrency:
-GCD
-Operation Queues
advantage: they centrally manage a thread pool that everybody uses

thread pool: a pattern where a number of threads are created depending on performing a number of tasks. The threads are organized in a queue so that they can be reused later if needed. the algorithm for making the amount of threads is really important as it deals with requests and memory optimizations.

GCD
an abstraction on threads which will let the developers work with queues instead.
we can send blocks to queues and the GCD will decide on which thread will the code run.

Operation Queues
Are a abstraction of the queue model exposed by GCD.They offer a bunch of features on top of GCD. Two different queues...
NSOperation/NSOperationqueue
an operation object is a single-shot object. you execute operations by adding them to an operation queue.

-main queue
-custom queues

We can control how many operations of a certain queue may be executed concurrently.
We can also sort the operations within a queue by using operation dependencies.


Run Loops
not technically a concurrency mechanism cause they don't enable parallel execution of tasks but good for asynchronous tasks.
whenever we call performSelector:withObject:afterDelay the run loop is used behind the scenes. It handles UI events, timers 
and other kernel events. NSObject also has a class method cancelPreviousPerformRequestsWithTarget: that cancels requests for 
a specific target from the current run loop.
run loop runs in different modes, when scrolling on iOS run loop is not running in normal mode so if we want a timer to 
run during scrolling, we need to add it to the run loop in the NSRunLoopCommonModes mode.


GCD in depth...
C-Library for managing different threads using queues and blocks

->declaring a new queue
dispatch_queue_t queue;

//three main popular types of queues
1.serial: makes sure that the tasks are happening in order and coming back in order
dispatch_queue_create("reverseDNSstringByConvention",DISPATCH_QUEUE_SERIAL); // or NULL instead of second parameter

dispatch once
-singletons don't go well with testing
-always create it as static or has global scope and don't create it as a member variable in
an object.

2.concurrent: tasks are happening simultaneously and coming back as soon as finishing
dispatch_get_global_queue(GLOBAL_QUEUE_PRIORITY,0);

-four types of queues
GLOBAL_QUEUE_PRIORITY_HIGH
GLOBAL_QUEUE_PRIORITY_DEFAULT
GLOBAL_QUEUE_PRIORITY_LOW
GLOBAL_QUEUE_PRIORITY_BACKGROUND // lowest priority, priority inversion warning!

adding tasks to a background queue
dispatch_async(queueName,^{ codeBlock });

3. Main Queue
**All UI related stuff should be run on the main queue
dispatch_async(dispatch_get_main_queue(),^{ codeBlock });

Other useful queues:
dispatch groups: useful for aggregate synchronization. We can add multiple blocks and track for their completion.

-dispatch_after
lets you do work a little bit later
don't substitute this for a normal use when you can put code into viewDidAppear and such

double delayInSeconds = 1.0;
dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW,(int64_t)(delayInSeconds * NSEC_PER_SEC));
dispatch_after(popTime,dispatch_get_main_queue(),^(void){
	// run this code on main queue after delay 
});

// groups are good for multiple concurrent queues doing work at the same time
dispatch_group_t group = dispatch_group_create();
dispatch_group_async(group,queue,^{ blockOfCode });
dispatch_group_notify(group,queue,^{ blockOfCode }); // notify when group tasks are completed

// dispatch_suspend() and dispatch_resume() are good for serializing asynchronous tasks like animations
dispatch_queue_t serial_queue = dispatch_queue_create("someIdentifier",DISPATCH_QUEUE_SERIAL);
dispatch_async(serial_queue,^{
	// suspend the current queue to let the following code finish
	dispatch_suspend(serial_queue);
	[UIView animationWithTime:0.5 animation:^{ view.center += 5; } completion:^{ 
		// resume current queue to let other stuff work again
		dispatch_resume(serial_queue);
	}];
});


-->Dispatch queues vs Opreration queues
dispatch queues execute tasks in a FIFO order but operations queues don't
dispatch queues can have serial execution but operations don't although it is possible to achieve via dependencies

-Operation queues
each queue is an instance of NSOperationQueue class
provides an object oriented approach instead of a c-based api
they store NSOperation objects
tasks always execute concurrently and never serially

NSOperation is an abstract class
two concrete subclasses:
-NSInvocationOperation
-NSBlockOperation

NSOperationQueue concurrent vs non-concurrent
In the context of an NSOperation object, which runs in an NSOperationQueue, the terms concurrent and non-concurrent do not necessarily refer to the side-by-side execution of threads. Instead, a non-concurrent operation is one that executes using the environment that is provided for it while a concurrent operation is responsible for setting up its own execution environment.

run loop in iOS
event processing loop that you use to schedule work and coordinate the receipt of incoming events. the purpose of a run loop is to keep your thread busy when there is work to do and put your thread to sleep when there is none.
each thread including app's main thread has an associated run loop object. only secondary threads need to run their run loop explicitly.

*Refering to self in blocks
when using self in a block we have to be careful of a memory cycle
local variables are always strong, and self.something means we have a strong pointer and so if these two are pointing to each other then neither one of them can leave the heap so then we have a memory cycle.
The solution is to declare a weak variable using the keyword __weak
** weak means if no object is pointing to it then we don't keep it in the heap.
__weak typeof(self) *weakSelf = self;


Atomicity
Race Condition: the fact that every thread can access the same memory may cause what is known as a race condition.
lock for instance variable
@synchronized (self) {
    myClass.object = value;
}

NSLock
NSLock is used to corrdinate operations between multiple threads using an object.

// example
[NSLock lock];
[dictionary addObject:@"data" forKey:@"one"];
[NSLock unlock];



