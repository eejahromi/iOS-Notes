ios sdk layers

cocoa touch
media services
core services
core os

UIPickerView protocols
<UIPickerViewDataSource,UIPickerViewDelegate>
UIPickerViewDataSource
-How many components for the picker
-How many rows

if more than one component then
if (component == 0)
do something
else 
do something
New
UIPickerViewDelegate
-Title for each row
-Selection row response

UITableView <UITableViewDataSource,UItableViewDelegate>
How many rows
Row selection

deqeue cell with custom tableview cell
(with #import "CustomTableViewCell.h")
CustomTableViewCell *cell = (UITableViewCell *)[tableView deqeueReusableCellWithIdentifier:@"Cell"];

// we can also access the reusable cell using tags from the attributes menu

for enabling editing in a tableView use the method:
-(void)tableView:(UITableView *)tableView commitEditingStyle:

if you want to cusmize a cell you have to create a new file "CustomTableViewCell" for it and have the code in there.

MultipleView Projects
we use segues and prepareForSegue to pass information to the next screen

important things for MultipleViews
-Class binding with the storyboard
-Segues and segue identifiers
-passing data to the next viewController using segues
NSIndexPath *indexPath = [tableView indexPathForSelectedRow]; // getting the index for selected row
i.e LeagueViewController *leagueView = [segue destinationViewController];


setting the top edge in code
UIEdgeInsets contentInset = tableView.contentInset;
content.top = 20; // 20 points from the top
[tableView setContentInset:contentInset];

objective-c
NSLog() for printing to the screen
@"Hello" // @ before all string literals

no string data type, instead
NSString *message = @"Hello World"; // using a pointer
NSString is a class and message is an object name, object being "Hello World"


classes and objects
class is the blueprint for the house
object IS THE HOUSE

another way to use classes for OOP
@class className //inside viewController.h or other main files

method/class operations in Objective-c vs java/C++

_height as an instance variable is actually 
self.height behind the scenes

calling a method inside a class
myObject.myMethod();

objective-c style:
[myObject myMethod];

calling methods with arguments:
myObject.someMethod(arg);
[myObject someMethod:arg];

multiple arguments:
myObject.insert("Hello",11);
[myObject insertString: @"Hello" atIndex:11];

nested method calls:
[myObject someMethod:[anotherObject anotherMethod]];


allocating and instantiating a new class:
NSDate *myDate
myDate = [NSDate new];

NSDate *myDate = [[NSDate alloc]init];
Class *myObj = [[Class alloc]init];

initializing classes:
self = [super init];
    if (self) {
    // do stuff
    }

collections
nsarray, nsdictionary, nsset

arrays:
NSArray to add objects to it
// we initialize it by using initWithObjects:@"one",@"two",nil;
NSLog(@"second element:%@",myArray[1]);

// NSArray is immutable
//shorthand for NSArray
NSArray *quicker = @[@"apple",@"orange",@"banana"]; //no nil

IndexPath object has a property (row) that could points to a path in the array.
IndexPath *index;
NSString *title = index.path;

NSMutableArray *myArray = [[NSMutableArray alloc]initWithObjects:...

Persistent data options 
NSUserdefaults
SQLite // mostly c library
Core Data // can enable it in xcode
Propert lists // XML underneath the hood


dictionary:
NSDictionary *states = 
[[NSDictionary alloc]initWithObjectsAndKeys:@"Arizona",@"AZ",
								@"California",@"CA",
                            	 @"Utah",@"UT",nil];
NSString *myState = @"CA";
        NSLog(@"%@ is for %@",myState,[states objectForKey:myState]);
        NSLog(@"%@ is for %@",myState,states[myState]);
        

NSMutableDictionary *states = ...

NSDictionary *quicker = @{ @"AZ" : @"Arizona", @"CA" : @"California" };

for-in loop:
for(NSString *name in listOfNames){
	// use name
}

-inheritance in objective-c is not that big of a deal
if you want to add a few methods to the NSString class to have more flexibility
	you donâ€™t need to add a subclass with a few added methods. you just use
	categories to add to the functionality of the existing class.

@interface ClassTOExtend (myCategoryName)
// add new methods

@end

forward deceleration

@className; // in another .h file
// forward deceleration avoid cycle imports

ios networking
NSStream 

lower level networking
CFNetworking

search implementation in ios
UISearchController
// allows search not only in table views but other viewControllers as well

things to add when we want to implement a search bar:
UISearchController *searchController = [[UISearchControlelr alloc]initWithSearchResultsController:nil];
// nil indicates that search results will be displayed the same way as table views
searchController.searchResultsUpdater = self;

For UICollectionView Segues
if ([segue.identifier isEqualToString:@"showRecipePhoto"]) {
        NSArray *indexPaths = [self.collectionView indexPathsForSelectedItems];
        UINavigationController *destViewController = segue.destinationViewController;
        RecipeViewController *recipeViewController = (RecipeViewController *)
[destViewController.childViewControllers firstObject];
        NSIndexPath *indexPath = [indexPaths objectAtIndex:0];
        recipeViewController.recipeImageName = [recipeImages[indexPath.section]
objectAtIndex:indexPath.row];
        [self.collectionView deselectItemAtIndexPath:indexPath animated:NO];
}


Facebook sharing
if([SLComposeViewController isAvailableForServiceType:SLServiceTypeForFacebook]){
    SLComposeViewController *controller = [SLViewController composeViewControllerForServiceType:SLServiceTypeFacebook];
    [controller setInitialText:@"Check out this Photo!"];
    [controller addImage: self.imageView.image];

accessing the camera
if([UIPickerController isSourceTypeAvailable])


accessing the photo library to choose an image
needed protocols <UIImagePickerController,UINavigationController>

if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeSavedPhotosAlbum]){
	UIImagePickerController *picker = [[UIImagePickerController alloc]init];
	picker.delegate = self;
	picker.allowsEditing = YES;
	picker.sourceType = UIImagePickerControllerSourceTypeSavedPhotosAlbum;
	
	[self presentViewController:picker animated:YES completion:NULL];
}

// delegate methods

-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{
	// selecting the edited image saved in the library
	UIImage *chosenImage = info[UIImagePickerControllerEditedImage];
	self.imageView.image = chosenImage;
	
	[picker dismissPickerViewControllerAnimated:YES completion:NULL];
}

-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
	[picker dismissPickerViewControllerAnimated:YES completion:NULL];
}

// playing video - almost same as pictures but we use KUTTypeMovie for mediaType

	picker.mediaType = [[NSArray alloc]initWithObjects:(NSString *)KUTTypeMovie,nil];
	
	[self presentViewController:picker animated:YES completion:NULL];

// opening a link inside safari - by switching to safari
UIApplication *application = [UIApplication sharedApplication];
[application openURL:blogPost.url]; // accessing the url property of blogPost instance

Using the torch
AVCaptureDevice *device;

[device lockForConfiguration:nil];
device.setTorchMode = AVCaptureTorchModeOn;
[device unlockForConfiguration];

-Parse with ios
parse as a backened for ios
-database (strored as JSON)
-analytics
-push notifications


Parse Object
PFObject *object = [PFObject addClassName:@"Test"]; //class name being the name of the table

// simple entry
[object setKey:@"name" forValue:@"John"];
-alternative way
object[@"name"] = @"John";

// simple query
PFQuery *query = [PFQuery queryWithClass:@"test"];
[query orderByAscendingOrder:@"createdAt"]; 

//user
PFUser *user = [PFUser userWithClass:@"user"];

iOS Graphics and Animations
-animation and graphics stack
UIKit
Core Graphics,Quartz 2D, Core Animation
OpenGL ES

-UIKit is buiult on top of Core Animations and is the easiest to use
-CoreGraphics (CG) is a c library
-Quartz 2d is great for drawing


-UIKit
adding subviews to the superview in order to show things such as labels, images etc.
for simple procedural animation we use animateWithDuration 
[UIView animateWithDuration:3.0 animations:^{ label.alpha:1.0; }];
