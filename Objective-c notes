ios sdk layers

cocoa touch
media services
core services
core os

iOS filesystem
an iOS app sandbox contains three main containers
-bundle container: main bundle where app gets created
-data container: the real filesystem where data gets stored
-icloud container: icloud stuff for file sharing


UIPickerView protocols
<UIPickerViewDataSource,UIPickerViewDelegate>
UIPickerViewDataSource
-How many components for the picker
-How many rows

if more than one component then
if (component == 0)
do something
else 
do something
New
UIPickerViewDelegate
-Title for each row
-Selection row response

UITableView <UITableViewDataSource,UItableViewDelegate>
How many rows
Row selection

deqeue cell with custom tableview cell
(with #import "CustomTableViewCell.h")
CustomTableViewCell *cell = (UITableViewCell *)[tableView deqeueReusableCellWithIdentifier:@"Cell"];

// we can also access the reusable cell using tags from the attributes menu

for enabling editing in a tableView use the method:
-(void)tableView:(UITableView *)tableView commitEditingStyle:

if you want to cusmtoize a cell you have to create a new file subclassing "CustomTableViewCell" and have the code in there.

MultipleView Projects
we use segues and prepareForSegue to pass information to the next screen

important things for MultipleViews
-Class binding with the storyboard
-Segues and segue identifiers
-passing data to the next viewController using segues
NSIndexPath *indexPath = [tableView indexPathForSelectedRow]; // getting the index for selected row
i.e LeagueViewController *leagueView = [segue destinationViewController];

// for modal segues, it's better to embed in a navigation VC instead of using a nav bar
for segue we use the following code to refer to the viewController
UINavigationController *nav = [segue destinationViewController];
NewVewController *destinationVC = [nav.viewControllers objectAtIndexPath:0];


setting the top edge in code
UIEdgeInsets contentInset = tableView.contentInset;
content.top = 20; // 20 points from the top
[tableView setContentInset:contentInset];

objective-c
NSLog() for printing to the screen
@"Hello" // @ before all string literals

no string data type, instead
NSString *message = @"Hello World"; // using a pointer
NSString is a class and message is an object name, object being "Hello World"


classes and objects
class is the blueprint for the house
object IS THE HOUSE

another way to use classes for OOP
@class className //inside viewController.h or other main files

method/class operations in Objective-c vs java/C++

_height as an instance variable is actually 
self.height behind the scenes

_height uses the instance variable directly
self.height uses the accessor method (getter in this case)

calling a method inside a class
myObject.myMethod();

objective-c style:
[myObject myMethod];

calling methods with arguments:
myObject.someMethod(arg);
[myObject someMethod:arg];

multiple arguments:
myObject.insert("Hello",11);
[myObject insertString: @"Hello" atIndex:11];

nested method calls:
[myObject someMethod:[anotherObject anotherMethod]];


allocating and instantiating a new class:
NSDate *myDate;
myDate = [NSDate new];

NSDate *myDate = [[NSDate alloc]init];
Class *myObj = [[Class alloc]init];

initializing classes:
self = [super init];
    if (self) {
    // do stuff
    }

Dynamic binding
when it is decided which method is going to be invoked during runtime instead of compile time

Dynamic typing
when a variable's type is not checked during compile time but at runtime


collections
NSArray, NSDictionary, NSSet

arrays:
NSArray to add objects to it
// we initialize it by using initWithObjects:@"one",@"two",nil;
NSLog(@"second element:%@",myArray[1]);

// NSArray is immutable
//shorthand for NSArray
NSArray *quicker = @[@"apple",@"orange",@"banana"]; //no nil

IndexPath object has a property (row) that could points to a path in the array.
IndexPath *index;
NSString *title = index.path;

NSMutableArray *myArray = [[NSMutableArray alloc]initWithObjects:...

Persistent data options 
NSUserdefaults
SQLite // mostly c library
Core Data // can enable it in xcode
Propert lists // XML underneath the hood


dictionary:
NSDictionary *states = 
[[NSDictionary alloc]initWithObjectsAndKeys:@"Arizona",@"AZ",
								@"California",@"CA",
                            	 @"Utah",@"UT",nil];
NSString *myState = @"CA";
        NSLog(@"%@ is for %@",myState,[states objectForKey:myState]);
        NSLog(@"%@ is for %@",myState,states[myState]);
        

NSMutableDictionary *states = ...

NSDictionary *quicker = @{ @"AZ" : @"Arizona", @"CA" : @"California" };

for-in loop:
for(NSString *name in listOfNames){
	// use name
}

// outlining a button using AttributedStrings
NSMutableAttributedString *title = [[NSMutableAttributedString alloc]initWIthString:self.myButton.currentTitle];
[title setAttributes:@{NSStrokeWidthAttributeName:@3,NSStrokeColorAttributeName:self.myButton.tintColor}
	range:NSMakeRange(0,[title length])];
[self.myButton setAttributedTitle:title forState:UIControlStateNormal];

NSSet:
sets are collections with unique elements
fast lookup and that's pretty much all they are good for

-inheritance in objective-c is not that big of a deal
if you want to add a few methods to the NSString class to have more flexibility
	you donâ€™t need to add a subclass with a few added methods. you just use
	categories to add to the functionality of the existing class.

@interface ClassTOExtend (myCategoryName)
// add new methods

@end

forward deceleration

@className; // in another .h file
// forward deceleration avoid cycle imports

ios networking
NSStream 

lower level networking
CFNetworking

search implementation in ios
UISearchController
// allows search not only in table views but other viewControllers as well

things to add when we want to implement a search bar:
UISearchController *searchController = [[UISearchControlelr alloc]initWithSearchResultsController:nil];
// nil indicates that search results will be displayed the same way as table views
searchController.searchResultsUpdater = self;

For UICollectionView Segues
if ([segue.identifier isEqualToString:@"showRecipePhoto"]) {
        NSArray *indexPaths = [self.collectionView indexPathsForSelectedItems];
        UINavigationController *destViewController = segue.destinationViewController;
        RecipeViewController *recipeViewController = (RecipeViewController *)
[destViewController.childViewControllers firstObject];
        NSIndexPath *indexPath = [indexPaths objectAtIndex:0];
        recipeViewController.recipeImageName = [recipeImages[indexPath.section]
objectAtIndex:indexPath.row];
        [self.collectionView deselectItemAtIndexPath:indexPath animated:NO];
}


Facebook sharing
if([SLComposeViewController isAvailableForServiceType:SLServiceTypeForFacebook]){
    SLComposeViewController *controller = [SLViewController composeViewControllerForServiceType:SLServiceTypeFacebook];
    [controller setInitialText:@"Check out this Photo!"];
    [controller addImage: self.imageView.image];

accessing the camera
if([UIPickerController isSourceTypeAvailable])


accessing the photo library to choose an image
needed protocols <UIImagePickerController,UINavigationController>

if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeSavedPhotosAlbum]){
	UIImagePickerController *picker = [[UIImagePickerController alloc]init];
	picker.delegate = self;
	picker.allowsEditing = YES;
	picker.sourceType = UIImagePickerControllerSourceTypeSavedPhotosAlbum;
	
	[self presentViewController:picker animated:YES completion:NULL];
}

// delegate methods

-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{
	// selecting the edited image saved in the library
	UIImage *chosenImage = info[UIImagePickerControllerEditedImage];
	self.imageView.image = chosenImage;
	
	[picker dismissPickerViewControllerAnimated:YES completion:NULL];
}

-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
	[picker dismissPickerViewControllerAnimated:YES completion:NULL];
}

// playing video - almost same as pictures but we use KUTTypeMovie for mediaType

	picker.mediaType = [[NSArray alloc]initWithObjects:(NSString *)KUTTypeMovie,nil];
	
	[self presentViewController:picker animated:YES completion:NULL];

// opening a link inside safari - by switching to safari
UIApplication *application = [UIApplication sharedApplication];
[application openURL:blogPost.url]; // accessing the url property of blogPost instance

Using the torch
AVCaptureDevice *device;

[device lockForConfiguration:nil];
device.setTorchMode = AVCaptureTorchModeOn;
[device unlockForConfiguration];

-Nav controller

Handy code for displaying nothing but the back arrow for navigation controller
self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@" " style:UIBarButtonItemStylePlain target:nil action:nil];

-programmatically adding bar buttons
UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemCancel 
target:self action:@selector(cancelButtonPressed:)];

-Parse with ios
parse as a backened for ios
-database (strored as JSON)
-analytics
-push notifications


Parse Object
PFObject *object = [PFObject addClassName:@"Test"]; //class name being the name of the table

// simple entry
[object setKey:@"name" forValue:@"John"];
-alternative way
object[@"name"] = @"John";

// simple query
PFQuery *query = [PFQuery queryWithClass:@"test"];
[query orderByAscendingOrder:@"createdAt"]; 

//user
PFUser *user = [PFUser userWithClass:@"user"];

iOS Graphics and Animations
-animation and graphics stack
UIKit
Core Graphics,Quartz 2D, Core Animation
OpenGL ES

-UIKit is buiult on top of Core Animations and is the easiest to use
-CoreGraphics (CG) is a c library
-Quartz 2d is great for drawing


-UIKit
adding subviews to the superview in order to show things such as labels, images etc.
for simple procedural animation we use animateWithDuration 
[UIView animateWithDuration:3.0 animations:^{ label.alpha:1.0; }];

more advanced animation
[UIView animateWithDuration:2.0
                      delay:0.5
                    options:UIViewAnimationOptionAutoreverse
                 animations:^{ label.alpha:1.0; }
                 completion:^{ label.alpha:0.0; }
when refering to self in blocks we have to capture a weak reference to self in order to avoid retain cycles.

UIKit vs Core Graphics
UIKit was built on CG to some points
UIKit is a little faster in terms of drawing shapes 
CG is faster in drawing text
CG also has more functions to use


UIKitDynamics
// UIKit Dynamics
    // UIKit Dynamics
    animator = [[UIDynamicAnimator alloc]initWithReferenceView:self.view];
    gravity = [[UIGravityBehavior alloc]initWithItems:@[self.mainImage]];
//    [gravity setMagnitude:0.1f];
    [animator addBehavior:gravity];
    
    collision = [[UICollisionBehavior alloc]initWithItems:@[self.mainImage]];
    collision.translatesReferenceBoundsIntoBoundary = YES;
    
//    CGPoint topEdge = CGPointMake(self.mainLabel.frame.origin.x + self.mainLabel.frame.size.width, self.mainLabel.frame.origin.y);
//    [collision addBoundaryWithIdentifier:@"barrier" fromPoint:self.mainLabel.frame.origin toPoint:topEdge];
    
    [animator addBehavior:collision];
    
    UIDynamicItemBehavior *itemBehaviour = [[UIDynamicItemBehavior alloc]initWithItems:@[self.mainImage]];
    itemBehaviour.elasticity = 0.6;
    [animator addBehavior:itemBehaviour];

// Applying blur to images using apples UIImageEffects files
// applying blur effect to an image
UIColor *tintColor = [UIColor colorWithWhite:0.11 alpha:0.36];
    UIImage *blurredBackground = [UIImageEffects imageByApplyingBlurToImage:[UIImage imageNamed:@"tree.jpg"] withRadius:12 tintColor:tintColor saturationDeltaFactor:1.2 maskImage:nil];
    self.backgroundImage.image = blurredBackground;

layer properties
layer.corderRadius
layer.zposition or for using this with views [self beingViewToFront:specificView];

// Playing simple audio using AVFoundation
after setting a property
@property (nonatomic,strong) AVAudioPlayer *musicPlayer;

[self.musicPlayer play];


NSNotification
way of communicating between objects
-NSNotificationCenter
tuning in
[NSNotificationCenter defaultCenter]; // get the default notification center
to listen to a station send it the following message
-(void)addObserver:selector:name:object:
tune out after listening
[center removeObserver:self];
[center removeObserver:name:object:];
