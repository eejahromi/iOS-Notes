ios sdk layers and their framework examples

cocoa touch: UIKit, Mapkit, iAd
media services: AVFoundation, Core Graphics, Core Image, SpriteKit
core services: Address Book, CFNetworking, Core Data, Core Location
core os: Core Bluetooth, System, Local Authentication

iOS filesystem
an iOS app sandbox contains three main containers
-bundle container: main bundle where app gets created
-data container: the real filesystem where data gets stored
-icloud container: icloud stuff for file sharing

-property attributes
strong creates an ownership to the object its assigned to.
weak creates a non-ownership to the object and avoids retain cycles, also sets the pointer to nil when destroyed.
copy alternative to strong, it creates a copy of the property and takes ownership of that. freezes the object if you're dealing with mutable objects.
   only applicable to objects conforming to NSCopying protocol.


deqeue cell with custom tableview cell
(with #import "CustomTableViewCell.h")
CustomTableViewCell *cell = (UITableViewCell *)[tableView deqeueReusableCellWithIdentifier:@"Cell"];

// we can also access the reusable cell using tags from the attributes menu

for enabling editing in a tableView use the method:
-(void)tableView:(UITableView *)tableView commitEditingStyle:

-iOS8 editActions for new buttons after cell swipe

-(NSArray<UITableViewRowAction *> *)tableView:(UITableView *)tableView editActionsForRowAtIndexPath:(NSIndexPath *)indexPath{
    UITableViewRowAction *share = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDefault title:@"Share" handler:^(UITableViewRowAction * _Nonnull action, NSIndexPath * _Nonnull indexPath) {
            NSString *defaultText = @"Just checking in";
            UIActivityViewController *activity = [[UIActivityViewController alloc]initWithActivityItems:@[defaultText] applicationActivities:nil];
            [self presentViewController:activity animated:YES completion:nil];
    }];
    share.backgroundColor = [UIColor colorWithRed:28/255.0 green:165/255.0 blue:253/255.0 alpha:1.0];
    UITableViewRowAction *delete = [UITableViewRowAction rowActionWithStyle:UITableViewRowActionStyleDefault title:@"Delete" handler:^(UITableViewRowAction * _Nonnull action, NSIndexPath * _Nonnull indexPath) {
        [tableViewArray removeObjectAtIndex:indexPath.row];
        [self.tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
    }];
    
    return @[delete,share];
}


// important things for MultipleViews
-Class binding with the storyboard
-Segues and segue identifiers
-passing data to the next viewController using segues
NSIndexPath *indexPath = [tableView indexPathForSelectedRow]; // getting the index for selected row
i.e LeagueViewController *leagueView = [segue destinationViewController];

// for modal segues, it's better to embed in a navigation VC instead of using a nav bar
for segue we use the following code to refer to the viewController
UINavigationController *nav = [segue destinationViewController];
NewVewController *destinationVC = [nav.viewControllers objectAtIndexPath:0];

Accessing file and path // json example
NSString *path = [[NSBundle mainBundle]pathForResource:@"stations" ofType:@"json"];
NSString *content = [[NSString alloc]initWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];


classes and objects
class is the blueprint for the house
object IS THE HOUSE

another way to use classes for OOP
@class className //inside viewController.h or other main files

method/class operations in Objective-c vs java/C++

_height as an instance variable is actually 
self.height behind the scenes

_height uses the instance variable directly
self.height uses the accessor method (getter in this case)

Dynamic binding
when it is decided which method is going to be invoked during runtime instead of compile time

Dynamic typing
when a variable's type is not checked during compile time but at runtime


collections
NSArray, NSDictionary, NSSet

arrays:
NSArray to add objects to it
// we initialize it by using initWithObjects:@"one",@"two",nil;
NSLog(@"second element:%@",myArray[1]);

// NSArray is immutable - you can't change the contents after initialization
//shorthand for NSArray
NSArray *quicker = @[@"apple",@"orange",@"banana"]; //no nil

IndexPath object has a property (row) that could points to a path in the array.
IndexPath *index;
NSString *title = index.path;

to change stuff after initialization, we use a mutable array
NSMutableArray *myArray = [[NSMutableArray alloc]initWithObjects:...

Persistent data options 
NSUserdefaults
SQLite // mostly c library
Core Data // can enable it in xcode
Propert lists // XML underneath the hood


dictionary:
NSDictionary *states = 
[[NSDictionary alloc]initWithObjectsAndKeys:@"Arizona",@"AZ",
								@"California",@"CA",
                            	 @"Utah",@"UT",nil];
NSString *myState = @"CA";
        NSLog(@"%@ is for %@",myState,[states objectForKey:myState]);
        NSLog(@"%@ is for %@",myState,states[myState]);
        

NSMutableDictionary *states = ...

NSDictionary *quicker = @{ @"AZ" : @"Arizona", @"CA" : @"California" };

for-in loop:
for(NSString *name in listOfNames){
	// use name
}

// outlining a button using AttributedStrings
NSMutableAttributedString *title = [[NSMutableAttributedString alloc]initWIthString:self.myButton.currentTitle];
[title setAttributes:@{NSStrokeWidthAttributeName:@3,NSStrokeColorAttributeName:self.myButton.tintColor}
	range:NSMakeRange(0,[title length])];
[self.myButton setAttributedTitle:title forState:UIControlStateNormal];

NSSet:
sets are collections with unique elements
fast lookup and that's pretty much all they are good for

-inheritance in objective-c is not that big of a deal
if you want to add a few methods to the NSString class to have more flexibility
	you donâ€™t need to add a subclass with a few added methods. you just use
	categories to add to the functionality of the existing class.

@interface ClassTOExtend (myCategoryName)
// add new methods

@end

forward deceleration

@className; // in another .h file
// forward deceleration avoid cycle imports

ios networking
NSStream 

lower level networking
CFNetworking

Facebook sharing
if([SLComposeViewController isAvailableForServiceType:SLServiceTypeForFacebook]){
    SLComposeViewController *controller = [SLViewController composeViewControllerForServiceType:SLServiceTypeFacebook];
    [controller setInitialText:@"Check out this Photo!"];
    [controller addImage: self.imageView.image];

accessing the camera
if([UIPickerController isSourceTypeAvailable])


accessing the photo library to choose an image
needed protocols <UIImagePickerController,UINavigationController>

if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeSavedPhotosAlbum]){
	UIImagePickerController *picker = [[UIImagePickerController alloc]init];
	picker.delegate = self;
	picker.allowsEditing = YES;
	picker.sourceType = UIImagePickerControllerSourceTypeSavedPhotosAlbum;
	
	[self presentViewController:picker animated:YES completion:NULL];
}

// delegate methods

-(void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{
	// selecting the edited image saved in the library
	UIImage *chosenImage = info[UIImagePickerControllerEditedImage];
	self.imageView.image = chosenImage;
	
	[picker dismissPickerViewControllerAnimated:YES completion:NULL];
}

-(void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
	[picker dismissPickerViewControllerAnimated:YES completion:NULL];
}

// playing video - almost same as pictures but we use KUTTypeMovie for mediaType

	picker.mediaType = [[NSArray alloc]initWithObjects:(NSString *)KUTTypeMovie,nil];
	
	[self presentViewController:picker animated:YES completion:NULL];

// opening a link inside safari - by switching to safari
UIApplication *application = [UIApplication sharedApplication];
[application openURL:blogPost.url]; // accessing the url property of blogPost instance



-custom delegation using protocols

steps:
-define protocol in the class providing the delegate methods
-create a delegate property in the same class
-use [self.delegate <methodName in protocol>] to pass the necessary info to the class conforming to delegate
-add <protocolName> to the top of the delegate class
-set the delegate to self in that same class
-call the delegate method and use the info passed to the delegate class

// the file that hands the task to the delegate
@property (weak,nonatomic) id <sendResponseDelegate> delegate;

@protocol sendResponseDelegate
-(void)responseBackToPreviousController:(NSString *)response;
@end

[self.delegate responseBackToPreviousController:response];

// the delegate file

ResponsibleController *responsibleFile = [[ResponsibleController alloc] init];
responsibleFile.delegate = self;

iOS Graphics and Animations
-animation and graphics stack
UIKit
Core Graphics,Quartz 2D, Core Animation
OpenGL ES

-UIKit is buiult on top of Core Animations and is the easiest to use
-CoreGraphics (CG) is a c library
-Quartz 2d is great for drawing

Using the autoresizingMask property you can tell a view what it should do when its superview
changes in size.

self.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;

-UIKit
adding subviews to the superview in order to show things such as labels, images etc.
for simple procedural animation we use animateWithDuration 
[UIView animateWithDuration:3.0 animations:^{ label.alpha:1.0; }];

more advanced animation
[UIView animateWithDuration:2.0
                      delay:0.5
                    options:UIViewAnimationOptionAutoreverse
                 animations:^{ label.alpha:1.0; }
                 completion:^{ label.alpha:0.0; }
when refering to self in blocks we have to capture a weak reference to self in order to avoid retain cycles.

weak means that when an object no longer has a strong pointer to it, it gets deallocated and all weak pointers become nil.
with views since we have a hierarchy then they will always have a strong pointer to them, their superView.


UIKit vs Core Graphics
UIKit was built on CG to some points
UIKit is a little faster in terms of drawing shapes 
CG is faster in drawing text
CG also has more functions to use


UIKitDynamics
// UIKit Dynamics
    // UIKit Dynamics
    animator = [[UIDynamicAnimator alloc]initWithReferenceView:self.view];
    gravity = [[UIGravityBehavior alloc]initWithItems:@[self.mainImage]];
//    [gravity setMagnitude:0.1f];
    [animator addBehavior:gravity];
    
    collision = [[UICollisionBehavior alloc]initWithItems:@[self.mainImage]];
    collision.translatesReferenceBoundsIntoBoundary = YES;
    
//    CGPoint topEdge = CGPointMake(self.mainLabel.frame.origin.x + self.mainLabel.frame.size.width, self.mainLabel.frame.origin.y);
//    [collision addBoundaryWithIdentifier:@"barrier" fromPoint:self.mainLabel.frame.origin toPoint:topEdge];
    
    [animator addBehavior:collision];
    
    UIDynamicItemBehavior *itemBehaviour = [[UIDynamicItemBehavior alloc]initWithItems:@[self.mainImage]];
    itemBehaviour.elasticity = 0.6;
    [animator addBehavior:itemBehaviour];


layer properties
layer.corderRadius
layer.zposition or for using this with views [self bringViewToFront:specificView];

-parsing JSON
    NSDictionary *parsedData = [NSJSONSerialization JSONObjectWithData:response options:0 error:&error];

iOS version checking
if ([[UIDevice currentDevice] systemVersion] >= 9.0) {
    // do stuff for iOS 9 and higher
}
else {
    // do stuff for older versions than iOS 9
}

// swift version
if #available(iOS 10.0, *) {
    // modern code
} else {
    // Fallback on earlier versions
}

nil vs NULL vs NSNull 
nil is a void */id
NULL is a c pointer null
NSNull is a class pointer

// NSNull example
NSArray *array = @[@1,@2,@3,[NSNull null]]; // NSNull should be used instead of nil

// Custom subscripting
// To add array style subscripting:
- (void)setObject:(id)obj atIndexedSubscript:(NSUInteger)idx; // setter
- (id)objectAtIndexedSubscript:(NSUInteger)idx;               // getter

// To add dictionary style subscripting
- (void)setObject:(id)obj forKeyedSubscript:(id <NSCopying>)key; // setter
- (id)objectForKeyedSubscript:(id)key;                           // getter

// custom subscripting example
NSMutableDictionary *dictionary = [[NSMutableDictionary alloc]init]; // in our custom class

- (void)setObject:(id)obj forKeyedSubscript:(id <NSCopying>)key {
	dictionary[key] = obj;
}

- (id)objectForKeyedSubscript:(id)key {
	return dictionary[key];
}

CutomClass *obj = [[CustomClass alloc]init];
obj[@"one"] = @"data";
obj[@"one"]; // returns "data"


// Obj-C class properties
in order to play with Swift better, Obj-C now has class properties
-Class properties aren't synthesized in XCode and it will generate a warning when you don't implement them yourself

// example
@interface Contestant : NSObject
@property (class,nonatomic,assign,readonly) NSUInteger userId;
@property (class, nonatomic, copy) NSUUID *identifier;
+ (void)resetIdentifier;
@end

@implementation Contestant
static NSUUID *_identifier = nil;

+ (NSInteger)userCount {
  return _userCount;
}

+ (NSUUID *)identifier {
  if (_identifier == nil) {
    _identifier = [[NSUUID alloc] init];
  }
  return _identifier;
}

+ (void)setIdentifier:(NSUUID *)newIdentifier {
  if (newIdentifier != _identifier) {
    _identifier = [newIdentifier copy];
  }
}
@end

// Generated Swift Interface
public class Contestant : NSObject {
    public class var userId: Int { get }
    public class var identifier: NSUUID!
    public class func resetIdentifier()
}

send user to settings app
if (&UIApplicationOpenSettingsURLString != NULL) {
   NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
    [[UIApplication sharedApplication] openURL:url];
}
else {
  // do it the old way of showing an alert
}

// Enum Count
// add an element to the last enum to be the count because we are starting at zero
typdef NS_Enum(NSUInteger,TableViewSections) {
	TableViewSectionPrograms = 0,
	TableViewSectionDevelopers,
	TableViewSectionLicenses,
	TableViewSectionCount
};

// let reuseIdentifier for a cell be the xib name if using one so we can get a 2 for one and use a constant
static NSString * const developerCell = @"DeveloperCell";

// creating string representation for enum types
typedef NS_ENUM(NSInteger, UITableViewCellStyle) { 
  UITableViewCellStyleDefault,
  UITableViewCellStyleValue1,
  UITableViewCellStyleValue2,
  UITableViewCellStyleSubtitle
};

NSString * const UITableViewCellStyleDescription[] = {
  [UITableViewCellStyleDefault] = @"Default", 
  [UITableViewCellStyleSubtitle] = @"Subtitle",
  [UITableViewCellStyleValue1] = @"Value 1", 
  [UITableViewCellStyleValue2] = @"Value 2"
};

UITableViewCellStyle style = ...;
NSString *description = UITableViewCellStyleDescription[style];


// finding the topmost viewController
+ (UIViewController*)topMostViewController
{
    UIViewController *topController = [UIApplication sharedApplication].keyWindow.rootViewController;

    while (topController.presentedViewController) {
        topController = topController.presentedViewController;
    }

    return topController;
}

// data detector
NSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingAllTypes error:nil];
[detector enumerateMatchesInString:input options:0 range:NSMakeRange(0,input.length) usingBlock:^(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop) {
	for(int i=0;i<[result numberOfRanges];i++) {
		NSRange range = [result numberOfRanges:i];
		NSString *substring = [input substringWithRange:range];
		NSLog(@"Found (%d): %@",(int)result.resultType,substring);
	}
}]; 

// Clearing all keychain items for an app
NSArray *secItemClasses = @[(__bridge id)kSecClassGenericPassword,
                       (__bridge id)kSecClassInternetPassword,
                       (__bridge id)kSecClassCertificate,
                       (__bridge id)kSecClassKey,
                       (__bridge id)kSecClassIdentity];
for (id secItemClass in secItemClasses) {
    NSDictionary *spec = @{(__bridge id)kSecClass: secItemClass};
    SecItemDelete((__bridge CFDictionaryRef)spec);
}

-Getting text content of a UIWebView using the DOM
[webView stringByEvaluatingJavascriptFrom:@"document.documentElement.innerText;"];

