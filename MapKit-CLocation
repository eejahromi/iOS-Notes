->Corelocation
To find out where you are!

CLLocationManager // the boss!

self.locationManager = [[CLLocationManager allc]init];
self.locationManager.delegate = self;

self.locationManager.desiredAccuracy
self.locationManager.distanceFilter

*new permission procedure in iOS 8+ 
need to add these keys to project-info.plist with some description for values.
NSLocationAlwaysUsageDescription
NSLocationWhenInUseUsageDescription

then we check for the authorization
if([self.locationManager respondsToSelector:@selector(requestAlwaysAuthorization)])
  [self.locationManager requestAlwaysAutorization];
  
then we start updating
[self.locationManager startUpdatingLocation];

finally we use the delegate method- locationManager: didUpdateLocations

->Geocoding
forward geocoding
we can use -- [self.geocoder geocodeAddressString:@"New York" completionHandler:
the more specific we are, the better the results
[self.mapView setRegion:MKCoordinateRegion animated:YES];
we can also use span.latitudeDelta and span.longitudeDelta to set the zooming


-ReverseGeocoding
using CLGeocoder 
-reverseGeocodeLocation:completionHandler
then we use CLPlacemark and its properties to determine the location, zip code etc.
placemark.name
placemaek.locality

->MapKit

two ways to set the distance for the portion that is displayed on map
1. (use MKCoordinateRegionMakeWithDistance function)
MKCoordinateRegion region = MKCoordinateRegionMakeWithDistance(annotation.coordinate,1000,1000);
[self.mapView setRegion:region animated:NO];

2. (use showAnnotations method - automatically calculates the best distance based on annotations)
NSArray *annotations = @[annotation];
[self.mapView showAnnotations animated:no];

different objects to work with for MapKit
MKMapView	// the map itself!
MKPointAnnotation // for annotation bubble etc.
MKCoordinateRegion // for setting the region for zooming etc. (a struct)
MKAnnotationView	// the entire annotationview
MKPinAnnotationView	// for configuring the pin
CLGeocoder	// for converting addresses into coordinates or reverse
CLPlacemark	// stores placemark data for a given latitude and longitude
