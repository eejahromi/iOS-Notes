Core Graphics

Core Graphics or Quartz is a drawing engine that draws on a context (could be thought of as a canvas).

Bitmaps and PDFs really work the same. You draw to them using identical commands and functions. You set colors and draw 
shapes and text just as if you were drawing in a view or to an image. but, PDF contexts contain vector data in their 
“backing store,” describing the drawing in a resolution-independent manner. Bitmap contexts are rasterized. They use pixel 
arrays to store the data drawn into them. PDF contexts also may contain more than one page. You establish a bounding 
rectangle that specifies the default size and location of each PDF page.

since PDFs are vector based they are resolution independent so resizing them won't affect the resolution.

For creating static views that don't move around CG is fine but if we want to create views that move around and need to be 
redrawn quite often we are better off using Core Animation.

Context
There are different ways you can get a context. You can get a hold of the current context using UIKit

CGContextRef currentContext; // a pointer to typedef to hide the star
context = UIGraphicsGetCurrentContext();

or create an Image context with UIKit and then use the same code to get a reference to it

UIGraphicsBeginImageContextWithOptions(CGSizeMake(45,45),YES,2);
CGContextRef context = UIGraphicsGetCurrentContext();

NOTE: Core Graphics uses lower level C functions and core foundation APIs so manual memory management is needed wherever the 
phrases create,copy and ref are used.

Push and pop context
We can also use UIKit to push and pop contexts:

UIGraphicsPushContext(context)
UIGraphicsPopContext(context)

Converting between coordinate Systems
CGPoint convertedPoint = [outerView convertPoint:samplePoint fromView:grayView]; // useful for views embedded in scrollviews
CGPoint convertedPoint = [outerView convertPoint:samplePoint toView:grayView];

Taking a snapshot of a view using CoreGraphics and UIKit
UIGraphicsBeginImageContextWithOptions(self.view.bounds,NO,[UIScreen mainScreen].scale);
[self.view drawViewHierarchyInRect:self.view.bounds afterScreenUpdates:YES];
UIImage *screenshot = UIGraphicsGetImageFromCurrentImageContext();
UIgraphicsEndImageContext();

// screenshot of part of a view
CGRect cropRect = view.bounds;
cropRect.origin.x = -CGRectGetMinX(rect);
cropRect.origin.y = -CGRectGetMinY(rect);
UIGraphicsBeginImageContextWithOptions(rect.size, NO, [UIScreen mainScreen].scale);
[view drawViewHierarchyInRect:cropRect afterScreenUpdates:YES];
UIImage *image = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();


// getting a UIKit version of a layer using ImageContext
UIGraphicsBeginImageContext(self.gradientLayer.frame.size);
[self.gradientLayer renderInContext: UIGraphicsGetCurrentContext()];
UIImage gradientImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();

Key structure
Points:CGPoint,Size:CGSize,Rectangles:CGRect,Transforms:CGAffineTransform

Transforms: Useful methods
CGAffineTransformMakeScale(), CGAffineTransformMakeRotation(), CGAffineTransformMakeTranslation()

convert to String
NSStringFromCGPoint() NSStringFromCGSize() NSStringFromCGRect() NSStringFromCGAffineTransform()
Convert from String
CGPointFromString() CGSizeFromString() CGRectFromString() CGAffineTransformFromString()

Convert to dictionary
CGPointCreateDictionaryRepresentation() CGSizeCreateDictionaryRepresentation() CGRectCreateDictionaryRepresentation()
Convert from dictionary
CGPointMakeWithDictionaryRepresentation() CGSizeMakeWithDictionaryRepresentation() CGRectMakeWithDictionaryRepresentation()
*Dictionaries are useful for storing structs in userDefaults

Lines
lineJoin: when a line turns a corner
-joinMiter //default sharp edge
-joinRound
-joinBevel // cut edge (not round, not sharp)
NOTE: You can't mix and match within one drawing
CGContextSetLineJoin(context,kCGLineJoinMiter);

lineCap: normal line end
-lineCapButt // just ends with a square
-lineCapRound // adds a half circle to end
-lineCapSquare // adds a half square to end
NOTE: can't mix and match in one drawing
CGContextSetLineCap(context, kCGLineCapButt);

lineDash: dashed, takes an array of CGFloat to represent the present and absent length parts of the line
CGFloat dashes[] = {12.0,8.0,6.0,14.0};
CGContextSetLineDash(context, 0, dashes, 2); // params: context, phase (how far into the pattern to start), dashes, count(of dashes array)

Performance
Core graphics is usually pretty fast but it could be computationally expensive when lines and paths are overlapping 
because it has to calculate where the intersections are to not do any drawing.

- Drawing CoreGraphics shapes with UIKit functions
UIBezierPath *path = [[UIBezierPath alloc] init];
[path moveToPoint:CGPointMake(self.view.frame.size.width,0.0)];
[path addLineToPoint:CGPointMake(self.view.frame.size.width,selfview.frame.size.height)];
[path closePath];







