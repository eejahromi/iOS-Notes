Stack

assertion (rules)
unit test method
unit class
unit test bundle

unit test methods
setup: set it up, create and provide tools
-setup gets called for every test method

teardown: clean up after, setting variables to original
-teardown gets called after every test method

if we want these to only run once, we add plus to the beginning of the method and don't call super

test: test itself, based on use case

test methods
should start with the word test
should have void for return type

all assertions(facts):
return void
generate some kind of failure
take in...format parameter

Assertion types:

XCTAssertNil(a1,format);
XCTAssertNotNil(a1,format);
//checks for nil values passing in and out of the functions

XCTAssertTrue(expression,format); // ex, XCTAssertTrue(1 + 1 == 2,@"");
XCTAssertFalse(expression,format);
// checks for true and false expressions

XCTAssertEqualObjects(a1,a2,format) // only works with objects (no int,double...)
XCTAssertEqual(a1,a2,format) // works with scalars,structs and unions (it does also work with object without error!)

XCTAssertEqualWithAccuracy(1.56,1.57,0.2,format) // good for floating point numbers

XCTAssertThrows(a1,format)
XCTAssertNOThrow(a1,format)
XCTAssertThrowsSpecific(exception,specific,format) // mostly for custom exception

Stubs:
In testing typically we can test one thing.
stubs are a way for us to use pre-defined answers for a part of our program which we need to pass in order to test another part of the progrm.
example, if we have a game and a method which moves an object one square up
also in that method we have a call to another method that checks the network connection
we want to provide a canned response for that connection method in order to test our moveUp method so we use a stub.





