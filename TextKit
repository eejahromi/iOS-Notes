// 3 components of TextKit
-NSTextStorage
-NSLayoutManager: Takes from text storage and lays it out into the shape provided by text container
-NSTextContainer
--UITextView

// Dynamic Type
self.textField.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];
self.textField.adjustsFontForContentSizeCategory = YES; // Only available on iOS 10 or later
// For iOS 9 and below we have to use NSNotificationCenter
[[NSNotificationCenter defaultCenter] addObserver:self
      selector:@selector(didChangePreferredContentSize:)
          name:UIContentSizeCategoryDidChangeNotification
        object:nil];

// Changing font color for a selected portion of text
NSRange selectedRange = [self.textView selectedRange];
NSDictionary *newColorAttribute = @{NSForegroundColorAttributeName: [UIColor redColor]};

[self.textView.textStorage beginEditing];
[self.textView.textStorage setAttributes:newColorAttribute range:selectedRange];
[self.textView.textStorage endEditing];

// remove kerning from string or label
NSMUtableAttributedString attributedString = [[NSMutableAttributedString alloc] initWithString:predefinedText];
[attributedString addAttribute:NSKernAttributeName value:@3 range:NSMakeRange(0,1)];
self.label.attributedText = attributedString

// Exclusion paths
CGRect convertedFrame = [self.textView convertRect:self.imageView fromView:self.view];
self.textView.textContainer.exclusionPaths = @[UIBezierPath bezierPathWithRect:convertedRect]; // set to nil to reset

// Underline a button title using attributedStrings
NSAttributedString *attr = [[NSAttributedString alloc] initWithString:@"Description"
                                                               attributes:@{NSUnderlineStyleAttributeName:@(NSUnderlineStyleSingle)}];
[self.linkButton setAttributedTitle:attr forState:UIControlStateNormal];


// Attributed Strings
UIFont *font = [UIFont fontWithName:@"Helvetica-Bold" size:30.0f];

NSMutableAttributedString * attrNameString = [[NSMutableAttributedString alloc] initWithString:self.name];
NSMutableAttributedString * attrAdjectiveString = [[NSMutableAttributedString alloc] initWithString:self.adjective];
NSMutableAttributedString * attrAdverbString = [[NSMutableAttributedString alloc] initWithString:self.adverb];
NSMutableAttributedString * attrNounString = [[NSMutableAttributedString alloc] initWithString:self.noun];
    
[attrNameString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.name.length)];
[attrAdjectiveString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.adjective.length)];
[attrNounString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.noun.length)];
[attrAdverbString addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, self.adverb.length)];

NSMutableAttributedString * firstString = [[NSMutableAttributedString alloc] initWithString:@" is happy the "];
NSMutableAttributedString * secondString = [[NSMutableAttributedString alloc] initWithString:@"homework is done because the"];
NSMutableAttributedString * thirdString = [[NSMutableAttributedString alloc] initWithString:@"almost stopped him from "];
NSMutableAttributedString * fourthString = [[NSMutableAttributedString alloc] initWithString:@"watching the game!"];

[attrNameString appendAttributedString:firstString];
[attrNameString appendAttributedString:attrAdjectiveString];
[attrNameString appendAttributedString:secondString];
[attrNameString appendAttributedString:attrNounString];
[attrNameString appendAttributedString:thirdString];
[attrNameString appendAttributedString:attrAdverbString];
[attrNameString appendAttributedString:fourthString];
    
self.resultsTextView.attributedText = attrNameString;

// Adding images to text using NSTextAttachment and NSMutableAttributedString
NSMutableAttributedString *mutableString = [[NSMutableAttributedString alloc] initWithString:@"John Smith"
                                                                                      attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:12]}];
// NSTextAttachment with an image property
NSTextAttachment *textAttachment = [NSTextAttachment new];
textAttachment.image = [UIImage imageNamed:@"officer"];
textAttachment.bounds = CGRectMake(1.0, 1.0, 12.0, 12.0);
    
[mutableString appendAttributedString:[NSAttributedString attributedStringWithAttachment:textAttachment]];
[self.infoLabel setAttributedText:mutableString]; // adding the mutableAttributedString to label


// UIMenuController
- (void)handleLongPressGesture:(UIGestureRecognizer *)sender  {
    if (recognizer.state == UIGestureRecognizerStateRecognized && [recognizer.view becomeFirstResponder]) {
      UIMenuController *menuController = [UIMenuController sharedMenuController];
      [menuController setTargetRect:sender.view.frame inView:sender.view.superview];
      [menuController setMenuVisible:YES animated:YES];
}

